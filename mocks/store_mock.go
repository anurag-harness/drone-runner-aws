// Code generated by MockGen. DO NOT EDIT.
// Source: ../store/store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/drone-runners/drone-runner-aws/types"
	gomock "github.com/golang/mock/gomock"
)

// MockInstanceStore is a mock of InstanceStore interface.
type MockInstanceStore struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceStoreMockRecorder
}

// MockInstanceStoreMockRecorder is the mock recorder for MockInstanceStore.
type MockInstanceStoreMockRecorder struct {
	mock *MockInstanceStore
}

// NewMockInstanceStore creates a new mock instance.
func NewMockInstanceStore(ctrl *gomock.Controller) *MockInstanceStore {
	mock := &MockInstanceStore{ctrl: ctrl}
	mock.recorder = &MockInstanceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceStore) EXPECT() *MockInstanceStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceStore) Create(arg0 context.Context, arg1 *types.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInstanceStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockInstanceStore) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceStore)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockInstanceStore) Find(arg0 context.Context, arg1 string) (*types.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockInstanceStoreMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockInstanceStore)(nil).Find), arg0, arg1)
}

// List mocks base method.
func (m *MockInstanceStore) List(arg0 context.Context, arg1 string, arg2 *types.QueryParams) ([]*types.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInstanceStoreMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstanceStore)(nil).List), arg0, arg1, arg2)
}

// Purge mocks base method.
func (m *MockInstanceStore) Purge(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockInstanceStoreMockRecorder) Purge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockInstanceStore)(nil).Purge), arg0)
}

// Update mocks base method.
func (m *MockInstanceStore) Update(arg0 context.Context, arg1 *types.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInstanceStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstanceStore)(nil).Update), arg0, arg1)
}

// MockStageOwnerStore is a mock of StageOwnerStore interface.
type MockStageOwnerStore struct {
	ctrl     *gomock.Controller
	recorder *MockStageOwnerStoreMockRecorder
}

// MockStageOwnerStoreMockRecorder is the mock recorder for MockStageOwnerStore.
type MockStageOwnerStoreMockRecorder struct {
	mock *MockStageOwnerStore
}

// NewMockStageOwnerStore creates a new mock instance.
func NewMockStageOwnerStore(ctrl *gomock.Controller) *MockStageOwnerStore {
	mock := &MockStageOwnerStore{ctrl: ctrl}
	mock.recorder = &MockStageOwnerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStageOwnerStore) EXPECT() *MockStageOwnerStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStageOwnerStore) Create(arg0 context.Context, arg1 *types.StageOwner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStageOwnerStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStageOwnerStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockStageOwnerStore) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStageOwnerStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStageOwnerStore)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockStageOwnerStore) Find(ctx context.Context, id string) (*types.StageOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*types.StageOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockStageOwnerStoreMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockStageOwnerStore)(nil).Find), ctx, id)
}
