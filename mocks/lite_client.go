// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/le/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	types "github.com/drone-runners/drone-runner-aws/types"
	gomock "github.com/golang/mock/gomock"
	api "github.com/harness/lite-engine/api"
	client "github.com/harness/lite-engine/cli/client"
)

// MockLiteClient is a mock of LiteClient interface.
type MockLiteClient struct {
	ctrl     *gomock.Controller
	recorder *MockLiteClientMockRecorder
}

// MockLiteClientMockRecorder is the mock recorder for MockLiteClient.
type MockLiteClientMockRecorder struct {
	mock *MockLiteClient
}

// NewMockLiteClient creates a new mock instance.
func NewMockLiteClient(ctrl *gomock.Controller) *MockLiteClient {
	mock := &MockLiteClient{ctrl: ctrl}
	mock.recorder = &MockLiteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiteClient) EXPECT() *MockLiteClientMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockLiteClient) Destroy(ctx context.Context, in *api.DestroyRequest) (*api.DestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, in)
	ret0, _ := ret[0].(*api.DestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Destroy indicates an expected call of Destroy.
func (mr *MockLiteClientMockRecorder) Destroy(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockLiteClient)(nil).Destroy), ctx, in)
}

// GetStepLogOutput mocks base method.
func (m *MockLiteClient) GetStepLogOutput(ctx context.Context, in *api.StreamOutputRequest, w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepLogOutput", ctx, in, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStepLogOutput indicates an expected call of GetStepLogOutput.
func (mr *MockLiteClientMockRecorder) GetStepLogOutput(ctx, in, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepLogOutput", reflect.TypeOf((*MockLiteClient)(nil).GetStepLogOutput), ctx, in, w)
}

// Health mocks base method.
func (m *MockLiteClient) Health(ctx context.Context) (*api.HealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(*api.HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockLiteClientMockRecorder) Health(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockLiteClient)(nil).Health), ctx)
}

// PollStep mocks base method.
func (m *MockLiteClient) PollStep(ctx context.Context, in *api.PollStepRequest) (*api.PollStepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollStep", ctx, in)
	ret0, _ := ret[0].(*api.PollStepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollStep indicates an expected call of PollStep.
func (mr *MockLiteClientMockRecorder) PollStep(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollStep", reflect.TypeOf((*MockLiteClient)(nil).PollStep), ctx, in)
}

// RetryHealth mocks base method.
func (m *MockLiteClient) RetryHealth(ctx context.Context, timeout time.Duration) (*api.HealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryHealth", ctx, timeout)
	ret0, _ := ret[0].(*api.HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryHealth indicates an expected call of RetryHealth.
func (mr *MockLiteClientMockRecorder) RetryHealth(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryHealth", reflect.TypeOf((*MockLiteClient)(nil).RetryHealth), ctx, timeout)
}

// RetryPollStep mocks base method.
func (m *MockLiteClient) RetryPollStep(ctx context.Context, in *api.PollStepRequest, timeout time.Duration) (*api.PollStepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryPollStep", ctx, in, timeout)
	ret0, _ := ret[0].(*api.PollStepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryPollStep indicates an expected call of RetryPollStep.
func (mr *MockLiteClientMockRecorder) RetryPollStep(ctx, in, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryPollStep", reflect.TypeOf((*MockLiteClient)(nil).RetryPollStep), ctx, in, timeout)
}

// RetryStartStep mocks base method.
func (m *MockLiteClient) RetryStartStep(ctx context.Context, in *api.StartStepRequest) (*api.StartStepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryStartStep", ctx, in)
	ret0, _ := ret[0].(*api.StartStepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryStartStep indicates an expected call of RetryStartStep.
func (mr *MockLiteClientMockRecorder) RetryStartStep(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryStartStep", reflect.TypeOf((*MockLiteClient)(nil).RetryStartStep), ctx, in)
}

// Setup mocks base method.
func (m *MockLiteClient) Setup(ctx context.Context, in *api.SetupRequest) (*api.SetupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, in)
	ret0, _ := ret[0].(*api.SetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Setup indicates an expected call of Setup.
func (mr *MockLiteClientMockRecorder) Setup(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockLiteClient)(nil).Setup), ctx, in)
}

// StartStep mocks base method.
func (m *MockLiteClient) StartStep(ctx context.Context, in *api.StartStepRequest) (*api.StartStepResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStep", ctx, in)
	ret0, _ := ret[0].(*api.StartStepResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStep indicates an expected call of StartStep.
func (mr *MockLiteClientMockRecorder) StartStep(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStep", reflect.TypeOf((*MockLiteClient)(nil).StartStep), ctx, in)
}

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockClientFactory) NewClient(instance *types.Instance, runnerName string, liteEnginePort int64, mock bool, mockTimeoutSecs int) (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", instance, runnerName, liteEnginePort, mock, mockTimeoutSecs)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockClientFactoryMockRecorder) NewClient(instance, runnerName, liteEnginePort, mock, mockTimeoutSecs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockClientFactory)(nil).NewClient), instance, runnerName, liteEnginePort, mock, mockTimeoutSecs)
}
