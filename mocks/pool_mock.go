// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/drivers/pool.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/drone-runners/drone-runner-aws/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// CanHibernate mocks base method.
func (m *MockDriver) CanHibernate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanHibernate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanHibernate indicates an expected call of CanHibernate.
func (mr *MockDriverMockRecorder) CanHibernate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanHibernate", reflect.TypeOf((*MockDriver)(nil).CanHibernate))
}

// Create mocks base method.
func (m *MockDriver) Create(ctx context.Context, opts *types.InstanceCreateOpts) (*types.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, opts)
	ret0, _ := ret[0].(*types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDriverMockRecorder) Create(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDriver)(nil).Create), ctx, opts)
}

// Destroy mocks base method.
func (m *MockDriver) Destroy(ctx context.Context, instances []*types.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDriverMockRecorder) Destroy(ctx, instances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDriver)(nil).Destroy), ctx, instances)
}

// DriverName mocks base method.
func (m *MockDriver) DriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName.
func (mr *MockDriverMockRecorder) DriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockDriver)(nil).DriverName))
}

// Hibernate mocks base method.
func (m *MockDriver) Hibernate(ctx context.Context, instanceID, poolName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hibernate", ctx, instanceID, poolName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hibernate indicates an expected call of Hibernate.
func (mr *MockDriverMockRecorder) Hibernate(ctx, instanceID, poolName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hibernate", reflect.TypeOf((*MockDriver)(nil).Hibernate), ctx, instanceID, poolName)
}

// Logs mocks base method.
func (m *MockDriver) Logs(ctx context.Context, instanceID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", ctx, instanceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockDriverMockRecorder) Logs(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockDriver)(nil).Logs), ctx, instanceID)
}

// Ping mocks base method.
func (m *MockDriver) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDriverMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDriver)(nil).Ping), ctx)
}

// RootDir mocks base method.
func (m *MockDriver) RootDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// RootDir indicates an expected call of RootDir.
func (mr *MockDriverMockRecorder) RootDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootDir", reflect.TypeOf((*MockDriver)(nil).RootDir))
}

// SetTags mocks base method.
func (m *MockDriver) SetTags(arg0 context.Context, arg1 *types.Instance, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTags indicates an expected call of SetTags.
func (mr *MockDriverMockRecorder) SetTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockDriver)(nil).SetTags), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockDriver) Start(ctx context.Context, instanceID, poolName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, instanceID, poolName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockDriverMockRecorder) Start(ctx, instanceID, poolName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDriver)(nil).Start), ctx, instanceID, poolName)
}
